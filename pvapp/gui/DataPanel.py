# -*- coding: utf-8 -*- ############################################################################# Python code generated with wxFormBuilder (version Sep 12 2010)## http://www.wxformbuilder.org/#### PLEASE DO "NOT" EDIT THIS FILE!###########################################################################import wx############################################################################# Class DataPanel###########################################################################class DataPanel ( wx.Panel ):		def __init__( self, parent ):		wx.Panel.__init__ ( self, parent, id = wx.ID_ANY, pos = wx.DefaultPosition, size = wx.Size( -1,-1 ), style = wx.TAB_TRAVERSAL )				bSizer3 = wx.BoxSizer( wx.VERTICAL )				sbSizer5 = wx.StaticBoxSizer( wx.StaticBox( self, wx.ID_ANY, u"Data Properties" ), wx.VERTICAL )				fgSizer1 = wx.FlexGridSizer( 2, 4, 0, 0 )		fgSizer1.SetFlexibleDirection( wx.BOTH )		fgSizer1.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_Name = wx.StaticText( self, wx.ID_ANY, u"Number Of Data Points", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_Name.Wrap( -1 )		fgSizer1.Add( self.m_Name, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 5 )				self.m_DataPoints = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, wx.TE_READONLY )		self.m_DataPoints.SetBackgroundColour( wx.SystemSettings.GetColour( wx.SYS_COLOUR_BTNSHADOW ) )				fgSizer1.Add( self.m_DataPoints, 0, wx.ALL, 5 )				self.m_Name1 = wx.StaticText( self, wx.ID_ANY, u"Waveform", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_Name1.Wrap( -1 )		fgSizer1.Add( self.m_Name1, 0, wx.ALL, 5 )				self.m_Waveform = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, wx.TE_READONLY )		self.m_Waveform.SetBackgroundColour( wx.SystemSettings.GetColour( wx.SYS_COLOUR_BTNSHADOW ) )				fgSizer1.Add( self.m_Waveform, 0, wx.ALL, 5 )				self.m_staticText12 = wx.StaticText( self, wx.ID_ANY, u"Frequency (Hz)", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText12.Wrap( -1 )		fgSizer1.Add( self.m_staticText12, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 5 )				self.m_Frequency = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, wx.TE_READONLY )		self.m_Frequency.SetBackgroundColour( wx.SystemSettings.GetColour( wx.SYS_COLOUR_BTNSHADOW ) )				fgSizer1.Add( self.m_Frequency, 0, wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 5 )				self.m_staticText121 = wx.StaticText( self, wx.ID_ANY, u"Intensity (V)", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText121.Wrap( -1 )		fgSizer1.Add( self.m_staticText121, 0, wx.ALL, 5 )				self.m_Intensity = wx.TextCtrl( self, wx.ID_ANY, wx.EmptyString, wx.DefaultPosition, wx.DefaultSize, wx.TE_READONLY )		self.m_Intensity.SetBackgroundColour( wx.SystemSettings.GetColour( wx.SYS_COLOUR_BTNSHADOW ) )				fgSizer1.Add( self.m_Intensity, 0, wx.ALL, 5 )				sbSizer5.Add( fgSizer1, 1, wx.EXPAND, 5 )				bSizer3.Add( sbSizer5, 0, wx.EXPAND, 5 )				sbSizer_Processing = wx.StaticBoxSizer( wx.StaticBox( self, wx.ID_ANY, u"Data transformations" ), wx.VERTICAL )				fgSizer3 = wx.FlexGridSizer( 3, 4, 0, 0 )		fgSizer3.SetFlexibleDirection( wx.BOTH )		fgSizer3.SetNonFlexibleGrowMode( wx.FLEX_GROWMODE_SPECIFIED )				self.m_button6 = wx.Button( self, wx.ID_ANY, u"Bin Data", wx.DefaultPosition, wx.DefaultSize, 0 )		fgSizer3.Add( self.m_button6, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )						fgSizer3.AddSpacer( ( 50, 0), 1, wx.EXPAND, 5 )				self.m_staticText3 = wx.StaticText( self, wx.ID_ANY, u"Bin Size", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText3.Wrap( -1 )		fgSizer3.Add( self.m_staticText3, 1, wx.ALIGN_CENTER_VERTICAL|wx.RIGHT|wx.ALIGN_RIGHT, 5 )				self.m_binSize = wx.TextCtrl( self, wx.ID_ANY, u"1", wx.DefaultPosition, wx.DefaultSize, 0 )		fgSizer3.Add( self.m_binSize, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_RIGHT, 5 )				self.m_btnFourier = wx.Button( self, wx.ID_ANY, u"Fourier Transform", wx.DefaultPosition, wx.DefaultSize, 0 )		fgSizer3.Add( self.m_btnFourier, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )						fgSizer3.AddSpacer( ( 0, 0), 1, wx.EXPAND, 5 )				m_fftChoiceChoices = []		self.m_fftChoice = wx.Choice( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, m_fftChoiceChoices, 0 )		self.m_fftChoice.SetSelection( 0 )		fgSizer3.Add( self.m_fftChoice, 0, wx.TOP|wx.BOTTOM|wx.LEFT|wx.ALIGN_RIGHT, 5 )						fgSizer3.AddSpacer( ( 0, 0), 1, wx.EXPAND, 5 )				self.m_button61 = wx.Button( self, wx.ID_ANY, u"Revert to Raw Data", wx.DefaultPosition, wx.DefaultSize, 0 )		fgSizer3.Add( self.m_button61, 0, wx.ALL, 5 )				sbSizer_Processing.Add( fgSizer3, 1, wx.EXPAND, 5 )				bSizer3.Add( sbSizer_Processing, 0, wx.EXPAND, 5 )				sbSizer51 = wx.StaticBoxSizer( wx.StaticBox( self, wx.ID_ANY, u"Crop Dataset" ), wx.VERTICAL )				gSizer3 = wx.GridSizer( 2, 2, 0, 0 )				self.m_staticText1 = wx.StaticText( self, wx.ID_ANY, u"Left Crop Distance", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText1.Wrap( -1 )		gSizer3.Add( self.m_staticText1, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_RIGHT|wx.RIGHT, 5 )				self.m_leftCropDistance = wx.TextCtrl( self, wx.ID_ANY, u"0", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer3.Add( self.m_leftCropDistance, 0, wx.ALIGN_CENTER_VERTICAL, 5 )				self.m_staticText11 = wx.StaticText( self, wx.ID_ANY, u"Right Crop Distance", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText11.Wrap( -1 )		gSizer3.Add( self.m_staticText11, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )				self.m_rightCropDistance = wx.TextCtrl( self, wx.ID_ANY, u"0", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer3.Add( self.m_rightCropDistance, 0, wx.ALIGN_CENTER_VERTICAL, 5 )				sbSizer51.Add( gSizer3, 1, wx.EXPAND, 5 )				self.m_button9 = wx.Button( self, wx.ID_ANY, u"Crop Data", wx.DefaultPosition, wx.DefaultSize, 0 )		sbSizer51.Add( self.m_button9, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 5 )				bSizer3.Add( sbSizer51, 0, wx.EXPAND, 5 )				sbSizer2 = wx.StaticBoxSizer( wx.StaticBox( self, wx.ID_ANY, u"Measurement Offsets" ), wx.VERTICAL )				bSizer41 = wx.BoxSizer( wx.VERTICAL )				self.m_interactiveOffsets = wx.Button( self, wx.ID_ANY, u"Select Interactively Offsets", wx.DefaultPosition, wx.DefaultSize, 0 )		bSizer41.Add( self.m_interactiveOffsets, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 5 )				sbSizer2.Add( bSizer41, 0, wx.EXPAND, 5 )				gSizer1 = wx.GridSizer( 2, 2, 0, 0 )				self.m_staticText9 = wx.StaticText( self, wx.ID_ANY, u"y offset channel", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText9.Wrap( -1 )		gSizer1.Add( self.m_staticText9, 0, wx.ALL|wx.ALIGN_RIGHT, 5 )				m_yChannelChoiceChoices = []		self.m_yChannelChoice = wx.Choice( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, m_yChannelChoiceChoices, 0 )		self.m_yChannelChoice.SetSelection( 0 )		gSizer1.Add( self.m_yChannelChoice, 0, wx.ALL, 5 )				self.m_staticText6 = wx.StaticText( self, wx.ID_ANY, u"y-axis offset", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText6.Wrap( -1 )		gSizer1.Add( self.m_staticText6, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_RIGHT|wx.RIGHT, 5 )				self.m_yOffset = wx.TextCtrl( self, wx.ID_ANY, u"0", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer1.Add( self.m_yOffset, 0, wx.ALIGN_CENTER_VERTICAL, 5 )				sbSizer2.Add( gSizer1, 0, wx.EXPAND, 5 )				bSizer42 = wx.BoxSizer( wx.VERTICAL )				self.m_changeOffset = wx.Button( self, wx.ID_ANY, u"Change Offsets", wx.DefaultPosition, wx.DefaultSize, 0 )		bSizer42.Add( self.m_changeOffset, 0, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 5 )				sbSizer2.Add( bSizer42, 0, wx.EXPAND, 5 )				bSizer3.Add( sbSizer2, 0, wx.EXPAND, 5 )				sbSizer3 = wx.StaticBoxSizer( wx.StaticBox( self, wx.ID_ANY, u"Invert Channels" ), wx.VERTICAL )				gSizer31 = wx.GridSizer( 0, 3, 0, 0 )				self.ChkBox_Ref = wx.CheckBox( self, wx.ID_ANY, u"Reference Intensity", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer31.Add( self.ChkBox_Ref, 0, wx.ALL, 5 )				self.ChkBox_PC = wx.CheckBox( self, wx.ID_ANY, u"PC Signal", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer31.Add( self.ChkBox_PC, 0, wx.ALL, 5 )				self.ChkBox_PL = wx.CheckBox( self, wx.ID_ANY, u"PL Signal", wx.DefaultPosition, wx.DefaultSize, 0 )		self.ChkBox_PL.SetValue(True) 		gSizer31.Add( self.ChkBox_PL, 0, wx.ALL, 5 )				sbSizer3.Add( gSizer31, 0, wx.EXPAND, 5 )				bSizer3.Add( sbSizer3, 0, wx.EXPAND, 5 )				bSizer4 = wx.BoxSizer( wx.HORIZONTAL )				self.m_Save = wx.Button( self, wx.ID_ANY, u"Save Settings", wx.DefaultPosition, wx.DefaultSize, 0 )		bSizer4.Add( self.m_Save, 0, wx.ALL, 5 )				self.m_Load = wx.Button( self, wx.ID_ANY, u"Save Data", wx.DefaultPosition, wx.DefaultSize, 0 )		bSizer4.Add( self.m_Load, 0, wx.ALL, 5 )				bSizer3.Add( bSizer4, 0, wx.ALIGN_CENTER_HORIZONTAL, 5 )				self.SetSizer( bSizer3 )		self.Layout()		bSizer3.Fit( self )				# Connect Events		self.m_button6.Bind( wx.EVT_BUTTON, self.onBinData )		self.m_binSize.Bind( wx.EVT_KILL_FOCUS, self.onXStart )		self.m_btnFourier.Bind( wx.EVT_BUTTON, self.onFourierTransform )		self.m_button61.Bind( wx.EVT_BUTTON, self.onRevertData )		self.m_button9.Bind( wx.EVT_BUTTON, self.onCropData )		self.m_interactiveOffsets.Bind( wx.EVT_BUTTON, self.onSelectOffset )		self.m_changeOffset.Bind( wx.EVT_BUTTON, self.onOffset )		self.ChkBox_Ref.Bind( wx.EVT_CHECKBOX, self.onInvertReference )		self.ChkBox_PC.Bind( wx.EVT_CHECKBOX, self.onInvertPC )		self.ChkBox_PL.Bind( wx.EVT_CHECKBOX, self.onInvertPL )		self.m_Save.Bind( wx.EVT_BUTTON, self.Save )		self.m_Load.Bind( wx.EVT_BUTTON, self.Load )		def __del__( self ):		pass			# Virtual event handlers, overide them in your derived class	def onBinData( self, event ):		event.Skip()		def onXStart( self, event ):		event.Skip()		def onFourierTransform( self, event ):		event.Skip()		def onRevertData( self, event ):		event.Skip()		def onCropData( self, event ):		event.Skip()		def onSelectOffset( self, event ):		event.Skip()		def onOffset( self, event ):		event.Skip()		def onInvertReference( self, event ):		event.Skip()		def onInvertPC( self, event ):		event.Skip()		def onInvertPL( self, event ):		event.Skip()		def Save( self, event ):		event.Skip()		def Load( self, event ):		event.Skip()	