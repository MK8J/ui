# -*- coding: utf-8 -*- ############################################################################# Python code generated with wxFormBuilder (version Sep 12 2010)## http://www.wxformbuilder.org/#### PLEASE DO "NOT" EDIT THIS FILE!###########################################################################import wx############################################################################# Class DataPanel###########################################################################class DataPanel ( wx.Panel ):		def __init__( self, parent ):		wx.Panel.__init__ ( self, parent, id = wx.ID_ANY, pos = wx.DefaultPosition, size = wx.Size( -1,-1 ), style = wx.TAB_TRAVERSAL )				bSizer31 = wx.BoxSizer( wx.VERTICAL )				sbSizer21 = wx.StaticBoxSizer( wx.StaticBox( self, wx.ID_ANY, u"WaveForm" ), wx.VERTICAL )				gSizer11 = wx.GridSizer( 0, 4, 0, 0 )				self.m_staticText13 = wx.StaticText( self, wx.ID_ANY, u"Intensity (V)", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText13.Wrap( -1 )		gSizer11.Add( self.m_staticText13, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_RIGHT|wx.RIGHT, 5 )				self.m_Intensity1 = wx.TextCtrl( self, wx.ID_ANY, u"0.5", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer11.Add( self.m_Intensity1, 0, wx.ALIGN_CENTER_VERTICAL, 5 )				self.m_staticText111 = wx.StaticText( self, wx.ID_ANY, u"Voltage Current\nConverter", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText111.Wrap( -1 )		gSizer11.Add( self.m_staticText111, 0, wx.ALIGN_RIGHT|wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 5 )				m_Output1Choices = [ u"High (2A/V)", u"Low (50mA/V)" ]		self.m_Output1 = wx.Choice( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, m_Output1Choices, 0 )		self.m_Output1.SetSelection( 1 )		gSizer11.Add( self.m_Output1, 0, wx.ALIGN_CENTER_VERTICAL, 5 )				self.m_staticText101 = wx.StaticText( self, wx.ID_ANY, u"Wave Function", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText101.Wrap( -1 )		gSizer11.Add( self.m_staticText101, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_RIGHT|wx.RIGHT, 5 )				m_Waveform1Choices = [ u"Sin", u"Cos", u"MJ", u"Triangle", u"Square" ]		self.m_Waveform1 = wx.Choice( self, wx.ID_ANY, wx.DefaultPosition, wx.DefaultSize, m_Waveform1Choices, 0 )		self.m_Waveform1.SetSelection( 0 )		gSizer11.Add( self.m_Waveform1, 0, wx.ALIGN_CENTER_VERTICAL, 5 )						gSizer11.AddSpacer( ( 0, 0), 1, wx.EXPAND, 5 )						gSizer11.AddSpacer( ( 0, 0), 1, wx.EXPAND, 5 )				self.m_staticText61 = wx.StaticText( self, wx.ID_ANY, u"Delay before\nillumination (ms)", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText61.Wrap( -1 )		gSizer11.Add( self.m_staticText61, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_RIGHT|wx.BOTTOM|wx.RIGHT, 5 )				self.m_Offset_Before1 = wx.TextCtrl( self, wx.ID_ANY, u"1", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer11.Add( self.m_Offset_Before1, 0, wx.ALIGN_CENTER_VERTICAL|wx.BOTTOM, 5 )				self.m_staticText71 = wx.StaticText( self, wx.ID_ANY, u"Delta after\nillumination (ms)", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText71.Wrap( -1 )		gSizer11.Add( self.m_staticText71, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_RIGHT|wx.BOTTOM|wx.RIGHT, 5 )				self.m_Offset_After1 = wx.TextCtrl( self, wx.ID_ANY, u"10", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer11.Add( self.m_Offset_After1, 0, wx.ALIGN_CENTER_VERTICAL|wx.BOTTOM, 5 )				self.m_staticText51 = wx.StaticText( self, wx.ID_ANY, u"Illumination\nperiod Slow (s)", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText51.Wrap( -1 )		gSizer11.Add( self.m_staticText51, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_RIGHT|wx.TOP|wx.RIGHT, 5 )				self.m_Period1 = wx.TextCtrl( self, wx.ID_ANY, u"1", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer11.Add( self.m_Period1, 0, wx.ALIGN_CENTER_VERTICAL|wx.TOP, 5 )				self.m_staticText34 = wx.StaticText( self, wx.ID_ANY, u"Illumination\nPeriod Fast (us)", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText34.Wrap( -1 )		gSizer11.Add( self.m_staticText34, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_RIGHT|wx.TOP|wx.RIGHT, 5 )				self.m_textCtrl28 = wx.TextCtrl( self, wx.ID_ANY, u"50", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer11.Add( self.m_textCtrl28, 0, wx.TOP, 5 )				self.m_staticText121 = wx.StaticText( self, wx.ID_ANY, u"Frequency\nSlow (Hz)", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText121.Wrap( -1 )		gSizer11.Add( self.m_staticText121, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.RIGHT, 5 )				self.m_Frequency1 = wx.TextCtrl( self, wx.ID_ANY, u"1", wx.DefaultPosition, wx.DefaultSize, wx.TE_READONLY )		self.m_Frequency1.SetBackgroundColour( wx.SystemSettings.GetColour( wx.SYS_COLOUR_BTNSHADOW ) )				gSizer11.Add( self.m_Frequency1, 0, wx.RIGHT|wx.ALIGN_CENTER_VERTICAL, 5 )				self.m_staticText35 = wx.StaticText( self, wx.ID_ANY, u"Frequency\nFast (Hz)", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText35.Wrap( -1 )		gSizer11.Add( self.m_staticText35, 0, wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL|wx.RIGHT, 5 )				self.m_textCtrl29 = wx.TextCtrl( self, wx.ID_ANY, u"20", wx.DefaultPosition, wx.DefaultSize, wx.TE_READONLY )		self.m_textCtrl29.SetBackgroundColour( wx.SystemSettings.GetColour( wx.SYS_COLOUR_BTNSHADOW ) )				gSizer11.Add( self.m_textCtrl29, 0, wx.ALIGN_CENTER_VERTICAL|wx.RIGHT, 5 )				sbSizer21.Add( gSizer11, 0, wx.EXPAND, 5 )				bSizer31.Add( sbSizer21, 0, wx.EXPAND, 5 )				sbSizer_Processing1 = wx.StaticBoxSizer( wx.StaticBox( self, wx.ID_ANY, u"Processing" ), wx.VERTICAL )				gSizer32 = wx.GridSizer( 0, 4, 0, 0 )				self.m_staticText81 = wx.StaticText( self, wx.ID_ANY, u"Averaging Slow", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText81.Wrap( -1 )		gSizer32.Add( self.m_staticText81, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_RIGHT|wx.RIGHT, 5 )				self.m_Averaging1 = wx.TextCtrl( self, wx.ID_ANY, u"1", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer32.Add( self.m_Averaging1, 0, wx.ALIGN_CENTER_VERTICAL, 5 )				self.m_staticText811 = wx.StaticText( self, wx.ID_ANY, u"Averaging Fast", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText811.Wrap( -1 )		gSizer32.Add( self.m_staticText811, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_RIGHT|wx.RIGHT, 5 )				self.m_Averaging11 = wx.TextCtrl( self, wx.ID_ANY, u"3", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer32.Add( self.m_Averaging11, 0, wx.ALIGN_CENTER_VERTICAL, 5 )				self.m_staticText31 = wx.StaticText( self, wx.ID_ANY, u"Binning Slow", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText31.Wrap( -1 )		gSizer32.Add( self.m_staticText31, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_RIGHT|wx.RIGHT, 5 )				self.m_Binning1 = wx.TextCtrl( self, wx.ID_ANY, u"10", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer32.Add( self.m_Binning1, 0, wx.ALIGN_CENTER_VERTICAL, 5 )				self.m_staticText311 = wx.StaticText( self, wx.ID_ANY, u"Binning Fast", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText311.Wrap( -1 )		gSizer32.Add( self.m_staticText311, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_RIGHT|wx.RIGHT, 5 )				self.m_Binning11 = wx.TextCtrl( self, wx.ID_ANY, u"1", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer32.Add( self.m_Binning11, 0, wx.ALIGN_CENTER_VERTICAL, 5 )				self.m_Name1 = wx.StaticText( self, wx.ID_ANY, u"Non Of Data\nPoints Slow: ", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_Name1.Wrap( -1 )		gSizer32.Add( self.m_Name1, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 5 )				self.m_DataPoint1 = wx.TextCtrl( self, wx.ID_ANY, u"XX", wx.DefaultPosition, wx.DefaultSize, wx.TE_READONLY )		self.m_DataPoint1.SetBackgroundColour( wx.SystemSettings.GetColour( wx.SYS_COLOUR_BTNSHADOW ) )				gSizer32.Add( self.m_DataPoint1, 0, wx.TOP|wx.BOTTOM|wx.RIGHT, 5 )				self.m_Name11 = wx.StaticText( self, wx.ID_ANY, u"Non Of Data\nPoints Fast: ", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_Name11.Wrap( -1 )		gSizer32.Add( self.m_Name11, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 5 )				self.m_DataPoint11 = wx.TextCtrl( self, wx.ID_ANY, u"XX", wx.DefaultPosition, wx.DefaultSize, wx.TE_READONLY )		self.m_DataPoint11.SetBackgroundColour( wx.SystemSettings.GetColour( wx.SYS_COLOUR_BTNSHADOW ) )				gSizer32.Add( self.m_DataPoint11, 0, wx.TOP|wx.BOTTOM|wx.RIGHT, 5 )				sbSizer_Processing1.Add( gSizer32, 1, wx.EXPAND, 5 )				bSizer31.Add( sbSizer_Processing1, 0, wx.EXPAND, 5 )				bSizer41 = wx.BoxSizer( wx.HORIZONTAL )				self.m_button11 = wx.Button( self, wx.ID_ANY, u"Go!", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_button11.SetFont( wx.Font( wx.NORMAL_FONT.GetPointSize(), 70, 90, 92, False, wx.EmptyString ) )		self.m_button11.SetBackgroundColour( wx.Colour( 98, 211, 22 ) )				bSizer41.Add( self.m_button11, 1, wx.ALL|wx.ALIGN_CENTER_HORIZONTAL, 5 )				self.m_Save1 = wx.Button( self, wx.ID_ANY, u"Save", wx.DefaultPosition, wx.DefaultSize, 0 )		bSizer41.Add( self.m_Save1, 0, wx.ALL, 5 )				bSizer31.Add( bSizer41, 0, wx.ALIGN_CENTER_HORIZONTAL, 5 )				sbSizer31 = wx.StaticBoxSizer( wx.StaticBox( self, wx.ID_ANY, u"Upside Down" ), wx.VERTICAL )				gSizer311 = wx.GridSizer( 0, 3, 0, 0 )				self.ChkBox_Ref1 = wx.CheckBox( self, wx.ID_ANY, u"Reference Intensity", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer311.Add( self.ChkBox_Ref1, 0, wx.ALL, 5 )				self.ChkBox_PC1 = wx.CheckBox( self, wx.ID_ANY, u"PC Signal", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer311.Add( self.ChkBox_PC1, 0, wx.ALL, 5 )				self.ChkBox_PL1 = wx.CheckBox( self, wx.ID_ANY, u"PL Signal", wx.DefaultPosition, wx.DefaultSize, 0 )		self.ChkBox_PL1.SetValue(True) 		gSizer311.Add( self.ChkBox_PL1, 0, wx.ALL, 5 )				sbSizer31.Add( gSizer311, 1, wx.EXPAND, 5 )				bSizer31.Add( sbSizer31, 0, wx.EXPAND, 5 )				sbSizer_Processing11 = wx.StaticBoxSizer( wx.StaticBox( self, wx.ID_ANY, u"Results" ), wx.VERTICAL )				gSizer321 = wx.GridSizer( 0, 4, 0, 0 )				self.Static_text007 = wx.StaticText( self, wx.ID_ANY, u"Averaging Slow", wx.DefaultPosition, wx.DefaultSize, 0 )		self.Static_text007.Wrap( -1 )		gSizer321.Add( self.Static_text007, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_RIGHT|wx.RIGHT, 5 )				self.m_Averaging12 = wx.TextCtrl( self, wx.ID_ANY, u"?", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer321.Add( self.m_Averaging12, 0, wx.ALIGN_CENTER_VERTICAL, 5 )				self.m_staticText8111 = wx.StaticText( self, wx.ID_ANY, u"Averaging Fast", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText8111.Wrap( -1 )		gSizer321.Add( self.m_staticText8111, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_RIGHT|wx.RIGHT, 5 )				self.m_Averaging111 = wx.TextCtrl( self, wx.ID_ANY, u"1", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer321.Add( self.m_Averaging111, 0, wx.ALIGN_CENTER_VERTICAL, 5 )				self.m_staticText312 = wx.StaticText( self, wx.ID_ANY, u"Binning Slow", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText312.Wrap( -1 )		gSizer321.Add( self.m_staticText312, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_RIGHT|wx.RIGHT, 5 )				self.m_Binning12 = wx.TextCtrl( self, wx.ID_ANY, u"1", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer321.Add( self.m_Binning12, 0, wx.ALIGN_CENTER_VERTICAL, 5 )				self.m_staticText3111 = wx.StaticText( self, wx.ID_ANY, u"Binning Fast", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_staticText3111.Wrap( -1 )		gSizer321.Add( self.m_staticText3111, 0, wx.ALIGN_CENTER_VERTICAL|wx.ALIGN_RIGHT|wx.RIGHT, 5 )				self.m_Binning111 = wx.TextCtrl( self, wx.ID_ANY, u"1", wx.DefaultPosition, wx.DefaultSize, 0 )		gSizer321.Add( self.m_Binning111, 0, wx.ALIGN_CENTER_VERTICAL, 5 )				self.m_Name12 = wx.StaticText( self, wx.ID_ANY, u"Non Of Data\nPoints Slow: ", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_Name12.Wrap( -1 )		gSizer321.Add( self.m_Name12, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 5 )				self.m_DataPoint12 = wx.TextCtrl( self, wx.ID_ANY, u"XX", wx.DefaultPosition, wx.DefaultSize, wx.TE_READONLY )		self.m_DataPoint12.SetBackgroundColour( wx.SystemSettings.GetColour( wx.SYS_COLOUR_BTNSHADOW ) )				gSizer321.Add( self.m_DataPoint12, 0, wx.TOP|wx.BOTTOM|wx.RIGHT, 5 )				self.m_Name111 = wx.StaticText( self, wx.ID_ANY, u"Non Of Data\nPoints Fast: ", wx.DefaultPosition, wx.DefaultSize, 0 )		self.m_Name111.Wrap( -1 )		gSizer321.Add( self.m_Name111, 0, wx.ALL|wx.ALIGN_RIGHT|wx.ALIGN_CENTER_VERTICAL, 5 )				self.m_DataPoint111 = wx.TextCtrl( self, wx.ID_ANY, u"XX", wx.DefaultPosition, wx.DefaultSize, wx.TE_READONLY )		self.m_DataPoint111.SetBackgroundColour( wx.SystemSettings.GetColour( wx.SYS_COLOUR_BTNSHADOW ) )				gSizer321.Add( self.m_DataPoint111, 0, wx.TOP|wx.BOTTOM|wx.RIGHT, 5 )				sbSizer_Processing11.Add( gSizer321, 1, wx.EXPAND, 5 )				bSizer31.Add( sbSizer_Processing11, 1, wx.EXPAND, 5 )				self.SetSizer( bSizer31 )		self.Layout()		bSizer31.Fit( self )				# Connect Events		self.m_Intensity1.Bind( wx.EVT_CHAR, self.onChar )		self.m_Intensity1.Bind( wx.EVT_TEXT, self.CurrentLimits )		self.m_Output1.Bind( wx.EVT_CHOICE, self.CurrentLimits )		self.m_Offset_Before1.Bind( wx.EVT_CHAR, self.onChar )		self.m_Offset_Before1.Bind( wx.EVT_KILL_FOCUS, self.Num_Data_Points_Update )		self.m_Offset_After1.Bind( wx.EVT_CHAR, self.onChar )		self.m_Offset_After1.Bind( wx.EVT_KILL_FOCUS, self.Num_Data_Points_Update )		self.m_Period1.Bind( wx.EVT_CHAR, self.onChar )		self.m_Period1.Bind( wx.EVT_KILL_FOCUS, self.Num_Data_Points_Update )		self.m_Averaging1.Bind( wx.EVT_CHAR, self.onChar_int )		self.m_Averaging11.Bind( wx.EVT_CHAR, self.onChar_int )		self.m_Binning1.Bind( wx.EVT_CHAR, self.onChar_int )		self.m_Binning1.Bind( wx.EVT_KILL_FOCUS, self.Num_Data_Points_Update )		self.m_Binning11.Bind( wx.EVT_CHAR, self.onChar_int )		self.m_Binning11.Bind( wx.EVT_KILL_FOCUS, self.Num_Data_Points_Update )		self.m_button11.Bind( wx.EVT_BUTTON, self.Perform_Measurement )		self.m_Save1.Bind( wx.EVT_BUTTON, self.Save )		self.m_Averaging12.Bind( wx.EVT_CHAR, self.onChar_int )		self.m_Averaging111.Bind( wx.EVT_CHAR, self.onChar_int )		self.m_Binning12.Bind( wx.EVT_CHAR, self.onChar_int )		self.m_Binning12.Bind( wx.EVT_KILL_FOCUS, self.Num_Data_Points_Update )		self.m_Binning111.Bind( wx.EVT_CHAR, self.onChar_int )		self.m_Binning111.Bind( wx.EVT_KILL_FOCUS, self.Num_Data_Points_Update )		def __del__( self ):		pass			# Virtual event handlers, overide them in your derived class	def onChar( self, event ):		event.Skip()		def CurrentLimits( self, event ):		event.Skip()				def Num_Data_Points_Update( self, event ):		event.Skip()						def onChar_int( self, event ):		event.Skip()							def Perform_Measurement( self, event ):		event.Skip()		def Save( self, event ):		event.Skip()							